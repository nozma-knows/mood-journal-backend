# enum EntryType {
#   VIDEO
#   AUDIO
#   TEXT
# }

# enum Role {
#   USER
#   ADMIN
# }

# type Login {
#   token: String
#   user: User
# }

# type User {
#   id: ID!
#   roles: [Role]
#   profile: Profile
#   entries: [Entry]
# }

# type Details {
#   id: ID!
# }

# type Data {
#   id: ID!
#   Entries: [Entry]!
# }

# type Profile {
#   id: ID!
#   firstName: String!
#   lastName: String!
#   email: String!
#   phone: String
#   user: User!
# }

# type Entry {
#   id: ID!
#   createdAt: String!
#   updatedAt: String!
#   title: String
#   content: String
#   type: EntryType
#   author: User!
# }

# type Login {
#   id: ID!
#   createdAt: String!
#   user: User!
# }

# input CreateLoginInput {
#   firstName: String!
#   lastName: String!
#   email: String!
#   password: String!
#   passwordConfirmation: String!
# }

# type Signup {
#   id: ID!
#   createdAt: String!
#   user: User!
# }

# type Query {
#   entries: [Entry]
#   users: [User]
# }

# type Mutation {
#   createLogin(input: CreateLoginInput!):
# }

type Login {
  id: ID!
  user: User!
  email: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean!
}

type Session {
  id: ID!
  token: String!
  expiry: Float!
  user: User!
}

input CreateLoginInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  passwordConfirmation: String!
}

input LoginInput {
  email: String!
  password: String!
}

input LogoutInput {
  sessionId: String!
}

type Query {
  users: [User]
}

type Mutation {
  createLogin(input: CreateLoginInput!): Login!
  login(input: LoginInput!): Session!
  logout(input: LogoutInput!): Session!
}
